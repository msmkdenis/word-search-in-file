// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/msmkdenis/word-search-in-file/internal/service (interfaces: IndexCache)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIndexCache is a mock of IndexCache interface.
type MockIndexCache struct {
	ctrl     *gomock.Controller
	recorder *MockIndexCacheMockRecorder
}

// MockIndexCacheMockRecorder is the mock recorder for MockIndexCache.
type MockIndexCacheMockRecorder struct {
	mock *MockIndexCache
}

// NewMockIndexCache creates a new mock instance.
func NewMockIndexCache(ctrl *gomock.Controller) *MockIndexCache {
	mock := &MockIndexCache{ctrl: ctrl}
	mock.recorder = &MockIndexCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIndexCache) EXPECT() *MockIndexCacheMockRecorder {
	return m.recorder
}

// AddIndex mocks base method.
func (m *MockIndexCache) AddIndex(arg0 string, arg1 map[string]map[string]struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddIndex", arg0, arg1)
}

// AddIndex indicates an expected call of AddIndex.
func (mr *MockIndexCacheMockRecorder) AddIndex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIndex", reflect.TypeOf((*MockIndexCache)(nil).AddIndex), arg0, arg1)
}

// GetIndex mocks base method.
func (m *MockIndexCache) GetIndex(arg0 string) map[string]map[string]struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndex", arg0)
	ret0, _ := ret[0].(map[string]map[string]struct{})
	return ret0
}

// GetIndex indicates an expected call of GetIndex.
func (mr *MockIndexCacheMockRecorder) GetIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndex", reflect.TypeOf((*MockIndexCache)(nil).GetIndex), arg0)
}
